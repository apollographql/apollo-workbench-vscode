{
  "operations": {
    "BestSellers": "query BestSellers {\n  bestSellers {\n    category\n    title\n    url\n    primaryImage(size: 160)\n    salesRankInCategory\n    reviewSummary {\n      totalReviews\n      averageRating\n    }\n  }\n}\n",
    "AllDepartments": "query AllDepartments {\n  categories {\n    category\n    url\n  }\n}\n",
    "ProductDetails": "query ProductDetails($id: ID!, $zip: Int) {\n  product(id: $id) {\n    title\n    images\n    primaryImage\n    category\n    reviewSummary {\n      averageRating\n      totalReviews\n    }\n    price {\n      cost {\n        amount\n        currencyCode\n      }\n      deal\n      dealSavings {\n        amount\n        currencyCode\n      }\n    }\n    delivery(deliveryZipCode: $zip) {\n      estimatedDelivery\n      fastestDelivery\n    }\n  }\n}\n"
  },
  "queryPlans": {
    "BestSellers": "QueryPlan {\n  Sequence {\n    Fetch(service: \"products\") {\n      {\n        bestSellers {\n          category\n          title\n          url\n          primaryImage(size: 160)\n          salesRankInCategory\n          __typename\n          id\n        }\n      }\n    },\n    Flatten(path: \"bestSellers.@\") {\n      Fetch(service: \"reviews\") {\n        {\n          ... on Product {\n            __typename\n            id\n          }\n        } =>\n        {\n          ... on Product {\n            reviewSummary {\n              totalReviews\n              averageRating\n            }\n          }\n        }\n      },\n    },\n  },\n}",
    "AllDepartments": "QueryPlan {\n  Fetch(service: \"products\") {\n    {\n      categories {\n        category\n        url\n      }\n    }\n  },\n}",
    "ProductDetails": "QueryPlan {\n  Sequence {\n    Fetch(service: \"products\") {\n      {\n        product(id: $id) {\n          title\n          images\n          primaryImage\n          category\n          __typename\n          id\n          price {\n            cost {\n              amount\n              currencyCode\n            }\n            deal\n            dealSavings {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    },\n    Parallel {\n      Flatten(path: \"product\") {\n        Fetch(service: \"reviews\") {\n          {\n            ... on Product {\n              __typename\n              id\n            }\n          } =>\n          {\n            ... on Product {\n              reviewSummary {\n                averageRating\n                totalReviews\n              }\n            }\n          }\n        },\n      },\n      Flatten(path: \"product\") {\n        Fetch(service: \"inventory\") {\n          {\n            ... on Product {\n              __typename\n              id\n            }\n          } =>\n          {\n            ... on Product {\n              delivery(deliveryZipCode: $zip) {\n                estimatedDelivery\n                fastestDelivery\n              }\n            }\n          }\n        },\n      },\n    },\n  },\n}"
  },
  "schemas": {
    "products": {
      "url": "",
      "sdl": "type Product @key(fields: \"id\") {\n  id: ID!\n  title: String\n  url: String\n  description: String\n  price: Price\n  salesRank(category: ProductCategory = ALL): Int\n  salesRankOverall: Int\n  salesRankInCategory: Int\n  category: ProductCategory\n  images(size: Int = 1000): [String]\n  primaryImage(size: Int = 1000): String\n}\n\ntype Price {\n  cost: Money\n  \"\"\"\n  A number between 0 and 1 signifying the % discount\n  \"\"\"\n  deal: Float\n  dealSavings: Money\n}\n\nextend type Query {\n  bestSellers(category: ProductCategory = ALL): [Product]\n  categories: [Department]\n  product(id: ID!): Product\n}\n\ntype Department {\n  category: ProductCategory\n  url: String\n}\n\nenum ProductCategory {\n  ALL\n  GIFT_CARDS\n  ELECTRONICS\n  CAMERA_N_PHOTO\n  VIDEO_GAMES\n  BOOKS\n  CLOTHING\n}\n\ntype Money {\n  amount: Float\n  currencyCode: CURRENCY_CODE\n}\nenum CURRENCY_CODE {\n  USD,\n  EUR\n}\n",
      "shouldMock": true,
      "customMocks": "const faker = require('faker')\n\nconst mocks = {\n    Product: () => ({\n        id: () => faker.random.uuid(),\n        title: () => faker.commerce.product(),\n        url: () => faker.internet.url(),\n        description: () => faker.lorem.paragraph(3),\n        price: () => faker.finance.amount(),\n        salesRange: () => faker.random.number(10000),\n        salesRankOverall: () => faker.random.number(10000),\n        salesRasalesRankInCategorynge: () => faker.random.number(10000),\n        category: () => \"ALL\",\n        images: () => ([faker.internet.url(), faker.internet.url()]),\n        primaryImage: () => faker.internet.url()\n    }),\n    Price: () => ({\n        deal: () => faker.random.float({ min: 0, max: 1 })\n    }),\n    Money: () => ({\n        amount: () => faker.finance.amount(),\n        currencyCode: () => \"USD\"\n    }),\n    Department: () => ({\n        url: () => faker.internet.url(),\n        category: () => \"ALL\"\n    })\n}\nmodule.exports = mocks;",
      "autoUpdateSchemaFromUrl": false,
      "requiredHeaders": []
    },
    "orders": {
      "url": "",
      "sdl": "type Order @key(fields: \"id\") {\n  id: ID!\n  shippingAddress: Address\n  billingAddress: Address\n  status: ORDER_STATUS\n  items: [LineItem]\n  phoneNotifications: String\n  cancelledReason: CANCELLED_REASON\n}\n\nextend type Warehouse @key(fields: \"id\") {\n  id: ID! @external\n}\nenum CANCELLED_REASON {\n  CUSTOMER\n  DECLINED\n  FRAUD\n  NO_INVENTORY\n  OTHER\n}\n\ntype LineItem {\n  product: Product\n  dealPrice: Money\n  quantityOrdered: Int\n  stockedFrom: ApproxLocation\n}\n\nextend type ApproxLocation @key(fields: \"warehouse { id }\") {\n  warehouse: Warehouse @external\n}\n\nextend type Product @key(fields: \"id\") {\n  id: ID! @external\n}\n\nenum ORDER_STATUS {\n  OPEN\n  IN_PROGRESS\n  SHIPPING\n  PARTIALLY_FULFILLED\n  FULFILLED\n  RETURNED\n  CANCELLED\n}\n\nextend type Address @key(fields: \"id\") {\n  id: ID! @external\n}\n\ntype Money {\n  amount: Float\n  currencyCode: CURRENCY_CODE\n}\nenum CURRENCY_CODE {\n  USD,\n  EUR\n}\n",
      "shouldMock": true,
      "customMocks": "const faker = require('faker')\n\nconst mocks = {\n    Order: () => ({\n        id: () => faker.random.uuid(),\n        phoneNotifications: () => faker.phone.phoneNumber(),\n        status: () => \"OPEN\",\n        cancelledReason: () => \"CUSTOMER\"\n    }),\n    Address: () => ({\n        id: () => faker.random.uuid(),\n    }),\n    Product: () => ({\n        id: () => faker.random.uuid(),\n    }),\n    Warehouse: () => ({\n        id: () => faker.random.uuid(),\n    }),\n    Money: () => ({\n        amount: () => faker.finance.amount(),\n        currencyCode: () => \"USD\"\n    }),\n    LineItem: () => ({\n        quantityOrdered: () => faker.random.number()\n    }),\n}\nmodule.exports = mocks;"
    },
    "inventory": {
      "url": "",
      "sdl": "type Warehouse @key(fields: \"id\") {\n  id: ID!\n  address: Address\n  aisles: [Aisle]\n}\ntype ApproxLocation @key(fields: \"warehouse { id }\") {\n  warehouse: Warehouse\n  aisle: Int\n  bin: Int\n  quantityOnHand: Int\n}\ntype Aisle {\n  id: ID!\n  bins: Bin\n}\ntype Bin {\n  shelfNumber: Int\n  products: ProductInventory\n}\ntype ProductInventory {\n  product: Product\n  quantityOnHand: Int\n}\nextend type Order @key(fields: \"id\") {\n  id: ID! @external\n  origin: Warehouse\n}\nextend type Address @key(fields: \"id\") {\n  id: ID! @external\n}\n\nextend type Product @key(fields: \"id\") {\n  id: ID! @external\n  inventory: Int\n  delivery(deliveryZipCode: Int): DeliveryEstimates\n}\n\"\"\"\nHere are some helpful details about your type\n\"\"\"\ntype DeliveryEstimates {\n  estimatedDelivery: String\n  fastestDelivery: String\n}\n",
      "shouldMock": true,
      "customMocks": "const faker = require(\"faker\");\n\nconst mocks = {\n  Warehouse: () => ({\n    id: () => faker.random.uuid(),\n  }),\n  Address: () => ({\n    id: () => faker.random.uuid(),\n  }),\n  Product: () => ({\n    id: () => faker.random.uuid(),\n    inventory: () => faker.random.number(),\n  }),\n  DeliveryEstimates: () => ({\n    estimatedDelivery: () => faker.date.soon().toDateString(),\n    fastestDelivery: () => faker.date.soon().toDateString(),\n  }),\n  ApproxLocation: () => ({\n    id: () => faker.random.uuid(),\n    aisle: () => faker.random.number(),\n    bin: () => faker.random.number(),\n    quantityOnHand: () => faker.random.number(),\n  }),\n  Aisle: () => ({\n    id: () => faker.random.uuid(),\n  }),\n  Bin: () => ({\n    shelfNumber: () => faker.random.uuid(),\n  }),\n  ProductInventory: () => ({\n    quantityOnHand: () => faker.random.number(),\n  }),\n};\nmodule.exports = mocks;\n"
    },
    "customers": {
      "url": "",
      "sdl": "type Customer @key(fields: \"id\") {\n  id: ID!\n  email: String\n  contactNumber: String\n  defaultShippingAddress: Address\n}\n\nextend type Address @key(fields: \"id\") {\n  id: ID! @external\n}\n\nextend type Query {\n  me: Customer\n}\n",
      "shouldMock": true,
      "customMocks": "const faker = require('faker')\n\nconst mocks = {\n    Address: () => ({\n        id: () => faker.random.uuid(),\n    }),\n    Customer: () => ({\n        id: () => faker.random.uuid(),\n        email: () => faker.internet.email(),\n        contactNumber: () => faker.phone.phoneNumber()\n    }),\n}\nmodule.exports = mocks;"
    },
    "checkouts": {
      "url": "",
      "sdl": "type Money {\n  amount: Float\n  currencyCode: CURRENCY_CODE\n}\nenum CURRENCY_CODE {\n  USD,\n  EUR\n}\ntype Checkout @key(fields: \"id\") {\n  id: ID!\n  order: Order\n  status: CART_STATUS\n  customer: Customer\n  subtotal: Money\n  taxes: Money\n  shipping: Money\n  total: Money\n}\n\nextend type Order @key(fields: \"id\") {\n  id: ID! @external\n}\n\nextend type Customer @key(fields: \"id\") {\n  id: ID! @external\n  activeCart: Checkout\n  savedLists: Checkout\n}\n\nenum CART_STATUS {\n  DELETED #Intentional by the user\n  IN_PROGRESS\n  PAID\n  COMPLETED\n  ABANDONED #After a certain period of inactivity time on cart\n}\n",
      "shouldMock": true,
      "customMocks": "const faker = require('faker')\n\nconst mocks = {\n    Checkout: () => ({\n        id: () => faker.random.uuid(),\n        status: () => \"IN_PROGRESS\"\n    }),\n    Order: () => ({\n        id: () => faker.random.uuid(),\n    }),\n    Customer: () => ({\n        id: () => faker.random.uuid(),\n    }),\n    Money: () => ({\n        amount: () => faker.finance.amount(),\n        currencyCode: () => \"USD\"\n    }),\n}\nmodule.exports = mocks;"
    },
    "locations": {
      "url": "",
      "sdl": "type Address @key(fields: \"id\") {\n  id: ID!\n  address1: String\n  address2: String\n  city: String\n  country: String\n  countryCode: COUNTRY_CODE\n  formatted(withCompany: Boolean, withName: Boolean): [String!]!\n}\n\nenum COUNTRY_CODE {\n  US,\n  EUR\n}\n",
      "shouldMock": true,
      "customMocks": "const faker = require('faker')\n\nconst mocks = {\n    Address: () => ({\n        id: () => faker.random.uuid(),\n        address1: () => faker.address.streetAddress,\n        address2: () => faker.address.secondaryAddress,\n        city: () => faker.address.city(),\n        country: () => faker.address.country(),\n        countryCode: () => \"US\"\n    }),\n}\nmodule.exports = mocks;"
    },
    "reviews": {
      "shouldMock": true,
      "sdl": "type Review @key(fields: \"id\") {\n  id: ID!\n  rating: Float\n  content: String\n}\n\nextend type Product @key(fields: \"id\") {\n  id: ID! @external\n  reviews: [Review]\n  reviewSummary: ReviewSummary\n}\n\ntype ReviewSummary {\n  totalReviews: Int\n  averageRating: Float\n}\n",
      "customMocks": "const faker = require('faker')\n\nconst mocks = {\n    Review: () => ({\n        id: () => faker.random.uuid(),\n        rating: () => faker.random.float({ min: 0, max: 5 }),\n        content: () => faker.lorem.paragraph(3)\n    }),\n    Product: () => ({\n        id: () => faker.random.uuid(),\n    }),\n    ReviewSummary: () => ({\n        totalReviews: () => faker.random.number(),\n        averageRating: () => faker.random.float({ min: 0, max: 5 }),\n    }),\n}\nmodule.exports = mocks;"
    }
  },
  "graphName": "acephei-e-commerce",
  "supergraphSdl": "schema\n  @core(feature: \"https://specs.apollo.dev/core/v0.2\"),\n  @core(feature: \"https://specs.apollo.dev/join/v0.1\", for: EXECUTION)\n{\n  query: Query\n}\n\ndirective @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA\n\ndirective @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION\n\ndirective @join__graph(name: String!, url: String!) on ENUM_VALUE\n\ndirective @join__owner(graph: join__Graph!) on INTERFACE | OBJECT\n\ndirective @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT\n\ntype Address\n  @join__owner(graph: LOCATIONS)\n  @join__type(graph: LOCATIONS, key: \"id\")\n  @join__type(graph: ORDERS, key: \"id\")\n  @join__type(graph: INVENTORY, key: \"id\")\n  @join__type(graph: CUSTOMERS, key: \"id\")\n{\n  address1: String @join__field(graph: LOCATIONS)\n  address2: String @join__field(graph: LOCATIONS)\n  city: String @join__field(graph: LOCATIONS)\n  country: String @join__field(graph: LOCATIONS)\n  countryCode: COUNTRY_CODE @join__field(graph: LOCATIONS)\n  formatted(withCompany: Boolean, withName: Boolean): [String!]! @join__field(graph: LOCATIONS)\n  id: ID! @join__field(graph: LOCATIONS)\n}\n\ntype Aisle {\n  bins: Bin\n  id: ID!\n}\n\ntype ApproxLocation\n  @join__owner(graph: INVENTORY)\n  @join__type(graph: INVENTORY, key: \"warehouse{id}\")\n  @join__type(graph: ORDERS, key: \"warehouse{id}\")\n{\n  aisle: Int @join__field(graph: INVENTORY)\n  bin: Int @join__field(graph: INVENTORY)\n  quantityOnHand: Int @join__field(graph: INVENTORY)\n  warehouse: Warehouse @join__field(graph: INVENTORY)\n}\n\ntype Bin {\n  products: ProductInventory\n  shelfNumber: Int\n}\n\nenum CANCELLED_REASON {\n  CUSTOMER\n  DECLINED\n  FRAUD\n  NO_INVENTORY\n  OTHER\n}\n\nenum CART_STATUS {\n  ABANDONED\n  COMPLETED\n  DELETED\n  IN_PROGRESS\n  PAID\n}\n\nenum COUNTRY_CODE {\n  EUR\n  US\n}\n\nenum CURRENCY_CODE {\n  EUR\n  USD\n}\n\ntype Checkout\n  @join__owner(graph: CHECKOUTS)\n  @join__type(graph: CHECKOUTS, key: \"id\")\n{\n  customer: Customer @join__field(graph: CHECKOUTS)\n  id: ID! @join__field(graph: CHECKOUTS)\n  order: Order @join__field(graph: CHECKOUTS)\n  shipping: Money @join__field(graph: CHECKOUTS)\n  status: CART_STATUS @join__field(graph: CHECKOUTS)\n  subtotal: Money @join__field(graph: CHECKOUTS)\n  taxes: Money @join__field(graph: CHECKOUTS)\n  total: Money @join__field(graph: CHECKOUTS)\n}\n\ntype Customer\n  @join__owner(graph: CUSTOMERS)\n  @join__type(graph: CUSTOMERS, key: \"id\")\n  @join__type(graph: CHECKOUTS, key: \"id\")\n{\n  activeCart: Checkout @join__field(graph: CHECKOUTS)\n  contactNumber: String @join__field(graph: CUSTOMERS)\n  defaultShippingAddress: Address @join__field(graph: CUSTOMERS)\n  email: String @join__field(graph: CUSTOMERS)\n  id: ID! @join__field(graph: CUSTOMERS)\n  savedLists: Checkout @join__field(graph: CHECKOUTS)\n}\n\n\"\"\"Here are some helpful details about your type\"\"\"\ntype DeliveryEstimates {\n  estimatedDelivery: String\n  fastestDelivery: String\n}\n\ntype Department {\n  category: ProductCategory\n  url: String\n}\n\ntype LineItem {\n  dealPrice: Money\n  product: Product\n  quantityOrdered: Int\n  stockedFrom: ApproxLocation\n}\n\ntype Money {\n  amount: Float\n  currencyCode: CURRENCY_CODE\n}\n\nenum ORDER_STATUS {\n  CANCELLED\n  FULFILLED\n  IN_PROGRESS\n  OPEN\n  PARTIALLY_FULFILLED\n  RETURNED\n  SHIPPING\n}\n\ntype Order\n  @join__owner(graph: ORDERS)\n  @join__type(graph: ORDERS, key: \"id\")\n  @join__type(graph: INVENTORY, key: \"id\")\n  @join__type(graph: CHECKOUTS, key: \"id\")\n{\n  billingAddress: Address @join__field(graph: ORDERS)\n  cancelledReason: CANCELLED_REASON @join__field(graph: ORDERS)\n  id: ID! @join__field(graph: ORDERS)\n  items: [LineItem] @join__field(graph: ORDERS)\n  origin: Warehouse @join__field(graph: INVENTORY)\n  phoneNotifications: String @join__field(graph: ORDERS)\n  shippingAddress: Address @join__field(graph: ORDERS)\n  status: ORDER_STATUS @join__field(graph: ORDERS)\n}\n\ntype Price {\n  cost: Money\n\n  \"\"\"A number between 0 and 1 signifying the % discount\"\"\"\n  deal: Float\n  dealSavings: Money\n}\n\ntype Product\n  @join__owner(graph: PRODUCTS)\n  @join__type(graph: PRODUCTS, key: \"id\")\n  @join__type(graph: ORDERS, key: \"id\")\n  @join__type(graph: INVENTORY, key: \"id\")\n  @join__type(graph: REVIEWS, key: \"id\")\n{\n  category: ProductCategory @join__field(graph: PRODUCTS)\n  delivery(deliveryZipCode: Int): DeliveryEstimates @join__field(graph: INVENTORY)\n  description: String @join__field(graph: PRODUCTS)\n  id: ID! @join__field(graph: PRODUCTS)\n  images(size: Int = 1000): [String] @join__field(graph: PRODUCTS)\n  inventory: Int @join__field(graph: INVENTORY)\n  price: Price @join__field(graph: PRODUCTS)\n  primaryImage(size: Int = 1000): String @join__field(graph: PRODUCTS)\n  reviewSummary: ReviewSummary @join__field(graph: REVIEWS)\n  reviews: [Review] @join__field(graph: REVIEWS)\n  salesRank(category: ProductCategory = ALL): Int @join__field(graph: PRODUCTS)\n  salesRankInCategory: Int @join__field(graph: PRODUCTS)\n  salesRankOverall: Int @join__field(graph: PRODUCTS)\n  title: String @join__field(graph: PRODUCTS)\n  url: String @join__field(graph: PRODUCTS)\n}\n\nenum ProductCategory {\n  ALL\n  BOOKS\n  CAMERA_N_PHOTO\n  CLOTHING\n  ELECTRONICS\n  GIFT_CARDS\n  VIDEO_GAMES\n}\n\ntype ProductInventory {\n  product: Product\n  quantityOnHand: Int\n}\n\ntype Query {\n  bestSellers(category: ProductCategory = ALL): [Product] @join__field(graph: PRODUCTS)\n  categories: [Department] @join__field(graph: PRODUCTS)\n  me: Customer @join__field(graph: CUSTOMERS)\n  product(id: ID!): Product @join__field(graph: PRODUCTS)\n}\n\ntype Review\n  @join__owner(graph: REVIEWS)\n  @join__type(graph: REVIEWS, key: \"id\")\n{\n  content: String @join__field(graph: REVIEWS)\n  id: ID! @join__field(graph: REVIEWS)\n  rating: Float @join__field(graph: REVIEWS)\n}\n\ntype ReviewSummary {\n  averageRating: Float\n  totalReviews: Int\n}\n\ntype Warehouse\n  @join__owner(graph: INVENTORY)\n  @join__type(graph: INVENTORY, key: \"id\")\n  @join__type(graph: ORDERS, key: \"id\")\n{\n  address: Address @join__field(graph: INVENTORY)\n  aisles: [Aisle] @join__field(graph: INVENTORY)\n  id: ID! @join__field(graph: INVENTORY)\n}\n\nenum core__Purpose {\n  \"\"\"\n  `EXECUTION` features provide metadata necessary to for operation execution.\n  \"\"\"\n  EXECUTION\n\n  \"\"\"\n  `SECURITY` features provide metadata necessary to securely resolve fields.\n  \"\"\"\n  SECURITY\n}\n\nscalar join__FieldSet\n\nenum join__Graph {\n  CHECKOUTS @join__graph(name: \"checkouts\" url: \"\")\n  CUSTOMERS @join__graph(name: \"customers\" url: \"\")\n  INVENTORY @join__graph(name: \"inventory\" url: \"\")\n  LOCATIONS @join__graph(name: \"locations\" url: \"\")\n  ORDERS @join__graph(name: \"orders\" url: \"\")\n  PRODUCTS @join__graph(name: \"products\" url: \"\")\n  REVIEWS @join__graph(name: \"reviews\" url: \"\")\n}\n",
  "federation": "1"
}